name: Daily Data Processing Pipeline

on:
  schedule:
    - cron: '0 0 * * *'   # Runs at 00:00 UTC daily
  workflow_dispatch:        # Enables manual triggering

jobs:
  process-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Required for pushing changes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Fetches all history for all branches and tags
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
          
      # - name: Run data processing script
      #   run: python automation_script.py
      # - name: Create refresh marker file
      #   run: echo "Refreshed at $(date)" > refresh.flag
        
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      # Debug step to verify Git configuration
      # - name: Verify Git configuration
      #   run: |
      #     echo "Current Git configuration:"
      #     git config --list
      #     echo "Repository status:"
      #     git status
          
      # - name: Commit and push changes
      #   run: |
      #     # Stage all CSV and log files
      #     git add "*.csv" "*.log" "refresh.flag"
          
      #     # Check if there are changes to commit
      #     if git diff --staged --quiet; then
      #       echo "No changes to commit"
      #     else
      #       # Commit and push changes
      #       git commit -m "Auto-update: Data processing results [skip ci]"
            
      #       # Debug: Show what's being committed
      #       echo "Files being committed:"
      #       git diff --name-status HEAD^1 HEAD
            
      #       # Push changes using GITHUB_TOKEN
      #       git push
      #     fi
      - name: Pull latest changes before push
        run: |
          git pull --rebase origin main
          git push origin main

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
